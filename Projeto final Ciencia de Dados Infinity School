{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNX6yJ6BjFwCZ0t1e8Uz0gT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JoaoBuosi/Aulas/blob/main/Projeto%20final%20Ciencia%20de%20Dados%20Infinity%20School\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Ambiente e Instruções"
      ],
      "metadata": {
        "id": "VoBNBwmuOD3A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Imports principais\n",
        "import os\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import (precision_recall_curve, average_precision_score, roc_auc_score,\n",
        "                             classification_report, confusion_matrix, precision_score, recall_score,\n",
        "                             f1_score, brier_score_loss)\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib\n",
        "\n",
        "# imbalanced-learn\n",
        "from imblearn.over_sampling import SMOTE, ADASYN\n",
        "from imblearn.under_sampling import TomekLinks, RandomUnderSampler\n",
        "from imblearn.pipeline import Pipeline as ImbPipeline\n",
        "\n",
        "# Model libraries\n",
        "import lightgbm as lgb\n",
        "import xgboost as xgb\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "print('Imports OK')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y1TFuiNSOaMw",
        "outputId": "b85f4c28-6000-4ab9-92c6-a4a4cee2791f"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imports OK\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Carregar dados"
      ],
      "metadata": {
        "id": "geJzcUTPOjSY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ajuste o caminho se necessário\n",
        "data_path = 'creditcard.csv'\n",
        "assert os.path.exists(data_path), f\"Arquivo não encontrado: {data_path}. Coloque o CSV na mesma pasta ou atualize o caminho.\"\n",
        "\n",
        "df = pd.read_csv(data_path)\n",
        "print('Dimensões:', df.shape)\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "gzwF6ibOOoEY",
        "outputId": "5bf54ed1-3088-4d40-d502-e673608c66ba"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dimensões: (122881, 31)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
              "0     0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
              "1     0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
              "2     1 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
              "3     1 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
              "4     2 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
              "\n",
              "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
              "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
              "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
              "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
              "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
              "4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n",
              "\n",
              "        V26       V27       V28  Amount  Class  \n",
              "0 -0.189115  0.133558 -0.021053  149.62    0.0  \n",
              "1  0.125895 -0.008983  0.014724    2.69    0.0  \n",
              "2 -0.139097 -0.055353 -0.059752  378.66    0.0  \n",
              "3 -0.221929  0.062723  0.061458  123.50    0.0  \n",
              "4  0.502292  0.219422  0.215153   69.99    0.0  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6622c8d4-21a7-40e3-9fec-cbb095255fcb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.018307</td>\n",
              "      <td>0.277838</td>\n",
              "      <td>-0.110474</td>\n",
              "      <td>0.066928</td>\n",
              "      <td>0.128539</td>\n",
              "      <td>-0.189115</td>\n",
              "      <td>0.133558</td>\n",
              "      <td>-0.021053</td>\n",
              "      <td>149.62</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.225775</td>\n",
              "      <td>-0.638672</td>\n",
              "      <td>0.101288</td>\n",
              "      <td>-0.339846</td>\n",
              "      <td>0.167170</td>\n",
              "      <td>0.125895</td>\n",
              "      <td>-0.008983</td>\n",
              "      <td>0.014724</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>...</td>\n",
              "      <td>0.247998</td>\n",
              "      <td>0.771679</td>\n",
              "      <td>0.909412</td>\n",
              "      <td>-0.689281</td>\n",
              "      <td>-0.327642</td>\n",
              "      <td>-0.139097</td>\n",
              "      <td>-0.055353</td>\n",
              "      <td>-0.059752</td>\n",
              "      <td>378.66</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.108300</td>\n",
              "      <td>0.005274</td>\n",
              "      <td>-0.190321</td>\n",
              "      <td>-1.175575</td>\n",
              "      <td>0.647376</td>\n",
              "      <td>-0.221929</td>\n",
              "      <td>0.062723</td>\n",
              "      <td>0.061458</td>\n",
              "      <td>123.50</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.009431</td>\n",
              "      <td>0.798278</td>\n",
              "      <td>-0.137458</td>\n",
              "      <td>0.141267</td>\n",
              "      <td>-0.206010</td>\n",
              "      <td>0.502292</td>\n",
              "      <td>0.219422</td>\n",
              "      <td>0.215153</td>\n",
              "      <td>69.99</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6622c8d4-21a7-40e3-9fec-cbb095255fcb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6622c8d4-21a7-40e3-9fec-cbb095255fcb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6622c8d4-21a7-40e3-9fec-cbb095255fcb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-761d2fb4-0b88-44ae-bdd6-6225ec7e0209\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-761d2fb4-0b88-44ae-bdd6-6225ec7e0209')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-761d2fb4-0b88-44ae-bdd6-6225ec7e0209 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# EDA"
      ],
      "metadata": {
        "id": "RjD-sEGaPAyJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Distribuição de classes\n",
        "print(df['Class'].value_counts())\n",
        "print('\\nProporção:')\n",
        "print(df['Class'].value_counts(normalize=True))\n",
        "\n",
        "# Estatísticas\n",
        "print('\\nResumo numérico (head):')\n",
        "print(df.describe().T.head())\n",
        "\n",
        "# Verificar nulos\n",
        "print('\\nNulos por coluna:')\n",
        "print(df.isnull().sum())\n",
        "\n",
        "# Histograma simples para a coluna Amount e Time (se desejar)\n",
        "plt.figure(figsize=(8,4))\n",
        "plt.hist(df['Amount'], bins=50)\n",
        "plt.title('Distribuição do Amount')\n",
        "plt.xlabel('Amount')\n",
        "plt.ylabel('Contagem')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "C3OjZR5ePUQy",
        "outputId": "fe198768-f136-4bb4-d34e-7c5f3dcc161b"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class\n",
            "0.0    122630\n",
            "1.0       250\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Proporção:\n",
            "Class\n",
            "0.0    0.997965\n",
            "1.0    0.002035\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Resumo numérico (head):\n",
            "         count          mean           std        min           25%  \\\n",
            "Time  122881.0  47960.696788  19271.900236   0.000000  36052.000000   \n",
            "V1    122881.0     -0.253250      1.834020 -56.407510     -1.021720   \n",
            "V2    122881.0     -0.005554      1.633205 -72.715728     -0.581971   \n",
            "V3    122881.0      0.677405      1.288146 -33.680984      0.173661   \n",
            "V4    122881.0      0.152665      1.334018  -5.172595     -0.706443   \n",
            "\n",
            "               50%           75%           max  \n",
            "Time  49837.000000  63807.000000  76723.000000  \n",
            "V1       -0.264411      1.155820      1.960497  \n",
            "V2        0.091708      0.758901     18.902453  \n",
            "V3        0.752260      1.372370      9.382558  \n",
            "V4        0.181079      1.010846     16.715537  \n",
            "\n",
            "Nulos por coluna:\n",
            "Time      0\n",
            "V1        0\n",
            "V2        0\n",
            "V3        0\n",
            "V4        0\n",
            "V5        0\n",
            "V6        0\n",
            "V7        0\n",
            "V8        0\n",
            "V9        0\n",
            "V10       1\n",
            "V11       1\n",
            "V12       1\n",
            "V13       1\n",
            "V14       1\n",
            "V15       1\n",
            "V16       1\n",
            "V17       1\n",
            "V18       1\n",
            "V19       1\n",
            "V20       1\n",
            "V21       1\n",
            "V22       1\n",
            "V23       1\n",
            "V24       1\n",
            "V25       1\n",
            "V26       1\n",
            "V27       1\n",
            "V28       1\n",
            "Amount    1\n",
            "Class     1\n",
            "dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Engenharia de Features e Preparação"
      ],
      "metadata": {
        "id": "2WGSHeQpPVVK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Criar colunas adicionais a partir de Time (se existir)\n",
        "df2 = df.copy()\n",
        "if 'Time' in df2.columns:\n",
        "    # Time: segundos desde a primeira transação\n",
        "    df2['hour'] = (df2['Time'] // 3600) % 24\n",
        "    df2['minute'] = (df2['Time'] // 60) % 60\n",
        "    df2['sec'] = df2['Time'] % 60\n",
        "\n",
        "# Escalar Amount com log + StandardScaler\n",
        "from sklearn.preprocessing import FunctionTransformer\n",
        "\n",
        "df2['Amount_log1p'] = np.log1p(df2['Amount'])\n",
        "\n",
        "# Definir X e y\n",
        "X = df2.drop(columns=['Class'])\n",
        "y = df2['Class']\n",
        "\n",
        "# Remove rows with NaN in the target variable 'Class'\n",
        "# This is necessary because train_test_split with stratify does not handle NaNs in y\n",
        "nan_in_y_mask = y.isna()\n",
        "X = X[~nan_in_y_mask]\n",
        "y = y[~nan_in_y_mask]\n",
        "\n",
        "\n",
        "# Remover colunas desnecessárias (se quiser manter Time, use as novas features)\n",
        "# Aqui mantemos todas as colunas exceto a original 'Amount' e 'Time' (opcional)\n",
        "if 'Time' in X.columns:\n",
        "    X = X.drop(columns=['Time', 'Amount'])\n",
        "else:\n",
        "    X = X.drop(columns=['Amount'])\n",
        "\n",
        "# Split stratificado\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n",
        "                                                    stratify=y, random_state=42)\n",
        "print('Train shape:', X_train.shape, 'Test shape:', X_test.shape)\n",
        "print('Fraude no treino:', y_train.sum(), '(%0.6f)' % (y_train.mean()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "blj9EbVpQLws",
        "outputId": "d0ebc20f-100e-4eed-af33-483e36eb19b5"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train shape: (98304, 32) Test shape: (24576, 32)\n",
            "Fraude no treino: 200.0 (0.002035)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Baseline rápidos"
      ],
      "metadata": {
        "id": "Wip6z7pOQNfM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Função utilitária para avaliação\n",
        "from sklearn.metrics import average_precision_score, roc_auc_score\n",
        "\n",
        "def evaluate_model(clf, X_train, y_train, X_test, y_test, proba=True):\n",
        "    clf.fit(X_train, y_train)\n",
        "    if proba and hasattr(clf, 'predict_proba'):\n",
        "        y_proba = clf.predict_proba(X_test)[:,1]\n",
        "    elif hasattr(clf, 'decision_function'):\n",
        "        y_proba = clf.decision_function(X_test)\n",
        "    else:\n",
        "        y_proba = clf.predict(X_test)\n",
        "    y_pred = clf.predict(X_test)\n",
        "    print(classification_report(y_test, y_pred, digits=4))\n",
        "    print('Confusion matrix:')\n",
        "    print(confusion_matrix(y_test, y_pred))\n",
        "    print('AUPRC (average precision):', average_precision_score(y_test, y_proba))\n",
        "    print('ROC AUC:', roc_auc_score(y_test, y_proba))\n",
        "    return y_proba, y_pred\n",
        "\n",
        "# Baseline 1: Logistic Regression with balanced weights\n",
        "pipe_lr = Pipeline([\n",
        "    ('scaler', StandardScaler()),\n",
        "    ('clf', LogisticRegression(class_weight='balanced', max_iter=1000, random_state=42))\n",
        "])\n",
        "print('Logistic Regression')\n",
        "proba_lr, pred_lr = evaluate_model(pipe_lr, X_train, y_train, X_test, y_test)\n",
        "\n",
        "# Baseline 2: RandomForest (balanced)\n",
        "print('\\nRandomForest')\n",
        "rf = RandomForestClassifier(n_estimators=100, class_weight='balanced', n_jobs=-1, random_state=42)\n",
        "proba_rf, pred_rf = evaluate_model(rf, X_train, y_train, X_test, y_test)\n",
        "\n",
        "# Baseline 3: LightGBM quick\n",
        "print('\\nLightGBM quick')\n",
        "clf_lgb = lgb.LGBMClassifier(n_estimators=200, objective='binary', random_state=42)\n",
        "proba_lgb, pred_lgb = evaluate_model(clf_lgb, X_train, y_train, X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EZu04fhEQRNk",
        "outputId": "549c06b8-89d5-48b5-c11e-18fe1475c7db"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0     0.9999    0.9750    0.9873     24526\n",
            "         1.0     0.0726    0.9600    0.1350        50\n",
            "\n",
            "    accuracy                         0.9750     24576\n",
            "   macro avg     0.5363    0.9675    0.5612     24576\n",
            "weighted avg     0.9980    0.9750    0.9856     24576\n",
            "\n",
            "Confusion matrix:\n",
            "[[23913   613]\n",
            " [    2    48]]\n",
            "AUPRC (average precision): 0.6458154596505374\n",
            "ROC AUC: 0.984677485117834\n",
            "\n",
            "RandomForest\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0     0.9996    1.0000    0.9998     24526\n",
            "         1.0     0.9750    0.7800    0.8667        50\n",
            "\n",
            "    accuracy                         0.9995     24576\n",
            "   macro avg     0.9873    0.8900    0.9332     24576\n",
            "weighted avg     0.9995    0.9995    0.9995     24576\n",
            "\n",
            "Confusion matrix:\n",
            "[[24525     1]\n",
            " [   11    39]]\n",
            "AUPRC (average precision): 0.89756251046666\n",
            "ROC AUC: 0.9589553942754627\n",
            "\n",
            "LightGBM quick\n",
            "[LightGBM] [Info] Number of positive: 200, number of negative: 98104\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.036196 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 7537\n",
            "[LightGBM] [Info] Number of data points in the train set: 98304, number of used features: 32\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.002035 -> initscore=-6.195466\n",
            "[LightGBM] [Info] Start training from score -6.195466\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0     0.9993    0.9980    0.9987     24526\n",
            "         1.0     0.4024    0.6600    0.5000        50\n",
            "\n",
            "    accuracy                         0.9973     24576\n",
            "   macro avg     0.7009    0.8290    0.7493     24576\n",
            "weighted avg     0.9981    0.9973    0.9976     24576\n",
            "\n",
            "Confusion matrix:\n",
            "[[24477    49]\n",
            " [   17    33]]\n",
            "AUPRC (average precision): 0.3698790557376612\n",
            "ROC AUC: 0.7678634918046155\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Smote + scaler + LGBM + cross-val"
      ],
      "metadata": {
        "id": "VvUSou-CQoyN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SMOTE + scaler + LGBM\n",
        "sm = SMOTE(random_state=42, sampling_strategy=0.1)  # ajustar sampling_strategy conforme teste\n",
        "pipe_smote = ImbPipeline(steps=[\n",
        "    ('scaler', StandardScaler()),\n",
        "    ('smote', sm),\n",
        "    ('clf', lgb.LGBMClassifier(n_estimators=300, random_state=42))\n",
        "])\n",
        "\n",
        "# Cross-val rápido (stratified k-fold) para average precision\n",
        "skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "from sklearn.model_selection import cross_val_score\n",
        "scores = cross_val_score(pipe_smote, X_train, y_train, cv=skf, scoring='average_precision', n_jobs=-1)\n",
        "print('CV average precision (SMOTE + LGB):', scores.mean(), scores)\n",
        "\n",
        "# Treinar no treino completo e avaliar no teste\n",
        "pipe_smote.fit(X_train, y_train)\n",
        "y_proba_smote = pipe_smote.predict_proba(X_test)[:,1]\n",
        "print('AUPRC (teste):', average_precision_score(y_test, y_proba_smote))\n",
        "print('ROC AUC (teste):', roc_auc_score(y_test, y_proba_smote))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0efx3OZpQoTO",
        "outputId": "444e25e9-c12b-4964-fbf4-99d6e9f9bdd2"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CV average precision (SMOTE + LGB): 0.8777046505684831 [0.85034043 0.90586584 0.82145478 0.88443094 0.92643127]\n",
            "[LightGBM] [Info] Number of positive: 9810, number of negative: 98104\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.076231 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 8160\n",
            "[LightGBM] [Info] Number of data points in the train set: 107914, number of used features: 32\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.090906 -> initscore=-2.302626\n",
            "[LightGBM] [Info] Start training from score -2.302626\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "AUPRC (teste): 0.9173628003556498\n",
            "ROC AUC (teste): 0.9931982386039304\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#GridSearch"
      ],
      "metadata": {
        "id": "asga-wuuQ2Sm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# GridSearch exemplo (rápido)\n",
        "param_grid = {\n",
        "    'clf__n_estimators': [100, 300],\n",
        "    'clf__learning_rate': [0.05, 0.1],\n",
        "}\n",
        "pipe_gs = ImbPipeline(steps=[\n",
        "    ('scaler', StandardScaler()),\n",
        "    ('smote', SMOTE(random_state=42, sampling_strategy=0.1)),\n",
        "    ('clf', lgb.LGBMClassifier(random_state=42))\n",
        "])\n",
        "\n",
        "gs = GridSearchCV(pipe_gs, param_grid, scoring='average_precision', cv=skf, n_jobs=-1, verbose=1)\n",
        "# Descomente a linha abaixo para rodar o GridSearch (pode demorar)\n",
        "# gs.fit(X_train, y_train)\n",
        "\n",
        "# Se quiser, execute apenas um fit rápido com os parâmetros acima para guardar como referência\n",
        "pipe_quick = ImbPipeline(steps=[\n",
        "    ('scaler', StandardScaler()),\n",
        "    ('smote', SMOTE(random_state=42, sampling_strategy=0.1)),\n",
        "    ('clf', lgb.LGBMClassifier(n_estimators=300, learning_rate=0.05, random_state=42))\n",
        "])\n",
        "pipe_quick.fit(X_train, y_train)\n",
        "print('Modelo rápido treinado.')\n",
        "print('Teste AUPRC:', average_precision_score(y_test, pipe_quick.predict_proba(X_test)[:,1]))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wel9eT0AQ7gW",
        "outputId": "245f34ac-a22f-458a-c4a4-e3d123bed91f"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Number of positive: 9810, number of negative: 98104\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.037571 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 8160\n",
            "[LightGBM] [Info] Number of data points in the train set: 107914, number of used features: 32\n",
            "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.090906 -> initscore=-2.302626\n",
            "[LightGBM] [Info] Start training from score -2.302626\n",
            "Modelo rápido treinado.\n",
            "Teste AUPRC: 0.9179107058888635\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explicabilidade com SHAP"
      ],
      "metadata": {
        "id": "vUFgpw2nROKY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Função para escolher threshold dado objetivo de recall mínimo\n",
        "\n",
        "def choose_threshold(y_true, y_proba, min_recall=0.8):\n",
        "    precision, recall, thresholds = precision_recall_curve(y_true, y_proba)\n",
        "    # thresholds length = len(precision)-1; vamos mapear\n",
        "    idx = np.argmax(np.where(recall[:-1] >= min_recall, precision[:-1], -1))\n",
        "    if idx == -1:\n",
        "        return 0.5\n",
        "    return thresholds[idx]\n",
        "\n",
        "# Exemplo com pipe_quick\n",
        "y_proba = pipe_quick.predict_proba(X_test)[:,1]\n",
        "thr = choose_threshold(y_test, y_proba, min_recall=0.8)\n",
        "print('Threshold escolhido para recall>=0.8:', thr)\n",
        "\n",
        "# Aplicar threshold e ver métricas\n",
        "y_pred_thr = (y_proba >= thr).astype(int)\n",
        "print(classification_report(y_test, y_pred_thr, digits=4))\n",
        "print('Confusion matrix:')\n",
        "print(confusion_matrix(y_test, y_pred_thr))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KDl0orWuRSyH",
        "outputId": "42762584-d3c9-419a-f97a-e641e2cedbe3"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Threshold escolhido para recall>=0.8: 0.987415766619473\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "         0.0     0.9997    1.0000    0.9998     24526\n",
            "         1.0     1.0000    0.8400    0.9130        50\n",
            "\n",
            "    accuracy                         0.9997     24576\n",
            "   macro avg     0.9998    0.9200    0.9564     24576\n",
            "weighted avg     0.9997    0.9997    0.9997     24576\n",
            "\n",
            "Confusion matrix:\n",
            "[[24526     0]\n",
            " [    8    42]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Resumo de Avaliação e próximos passos"
      ],
      "metadata": {
        "id": "xP1YmyXjRVdv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# SHAP (se instalou shap)\n",
        "try:\n",
        "    import shap\n",
        "    print('SHAP versão:', shap.__version__)\n",
        "    explainer = shap.TreeExplainer(pipe_quick.named_steps['clf'])\n",
        "    X_shap = X_test.sample(300, random_state=42)\n",
        "    shap_values = explainer.shap_values(X_shap)\n",
        "    # Summary plot (vai abrir em notebook)\n",
        "    shap.summary_plot(shap_values, X_shap)\n",
        "except Exception as e:\n",
        "    print('Erro ao rodar SHAP (talvez não instalado ou recurso insuficiente):', e)\n",
        "    print('Se desejar, instale shap e rode esta célula novamente.')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 974
        },
        "id": "TXD8T1TZRcIg",
        "outputId": "65bbd2f1-ee19-4a32-9043-434d46063f1e"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SHAP versão: 0.49.1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x950 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Salvar modelo treinado (pipe_quick como exemplo)\n",
        "model_path = 'lgbm_smote_pipe.joblib'\n",
        "joblib.dump(pipe_quick, model_path)\n",
        "print('Modelo salvo em', model_path)\n",
        "\n",
        "# Carregar exemplo\n",
        "# loaded = joblib.load(model_path)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z4bAPbXNRgN4",
        "outputId": "5a69b4a8-5c16-4c67-86ef-5a8dd120a47f"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Modelo salvo em lgbm_smote_pipe.joblib\n"
          ]
        }
      ]
    }
  ]
}